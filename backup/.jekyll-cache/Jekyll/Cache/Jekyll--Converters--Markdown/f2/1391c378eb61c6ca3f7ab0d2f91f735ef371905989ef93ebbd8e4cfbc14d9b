I"d<p>문제를 풀거나 강의를 들으면서 헷갈리거나 궁금한 함수를 기록하고 나중에 찾아보면서 정리할 예정</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">isnumeric()</code>, <code class="language-plaintext highlighter-rouge">isdigit()</code>, <code class="language-plaintext highlighter-rouge">isdecimal()</code> 의 차이</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">isnumeric()</code>
        <ul>
          <li>문자열 내장함수</li>
          <li>문자열이 모두 <code class="language-plaintext highlighter-rouge">numeric</code>문자로 이루어져있다면 <code class="language-plaintext highlighter-rouge">True</code>를 반환합니다.</li>
          <li>숫자를 표현하는 문자열까지 포함한다.(제곱근, 분수, 거듭제곱)</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">isdigit()</code>
        <ul>
          <li>문자열 내장함수</li>
          <li>모든 문자가 <code class="language-plaintext highlighter-rouge">digit</code>이면 <code class="language-plaintext highlighter-rouge">True</code>를 반환합니다.</li>
          <li>단일 글자가 숫자형태이면 무조건 <code class="language-plaintext highlighter-rouge">True</code></li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">isdecimal()</code>
        <ul>
          <li>문자열 내장함수</li>
          <li>문자열 내의 모든 문자가 십진수 문자이면 <code class="language-plaintext highlighter-rouge">True</code>를 반환합니다.</li>
          <li>문자열이 int형으로 변환되지 않는다면 <code class="language-plaintext highlighter-rouge">False</code>이고 특수문자 중 숫자 모양은 숫자로 보지 않는다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">find()</code>, <code class="language-plaintext highlighter-rouge">index()</code> 의 차이</p>

    <ul>
      <li>둘 다 찾고자 하는 값의 index 값을 리턴합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">find()</code>는 찾는 문자나 문자열이 없는 경우 -1을 <code class="language-plaintext highlighter-rouge">return</code>한다.</li>
      <li><code class="language-plaintext highlighter-rouge">index()</code>는 찾는 문자나 문자열이 없을 경우 오류를 발생시킨다.
<code class="language-plaintext highlighter-rouge"># ValueError: substring not found</code></li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">sum(iterable,/,start=0)</code></p>

    <ul>
      <li>
        <p>내장함수</p>
      </li>
      <li><code class="language-plaintext highlighter-rouge">iterable</code>과 <code class="language-plaintext highlighter-rouge">start</code>에 해당하는 항목들을 왼쪽에서 오른쪽으로 합하고 그 합을 반환합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">iterable</code>의 항목은 일반적으로 숫자이며 <code class="language-plaintext highlighter-rouge">start</code>의 값은 문자열이 될 수 없습니다.</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">replace(old,new[,count])</code></p>

    <ul>
      <li>문자열 내장 함수</li>
      <li>모든 old를 new로 치환한 값을 반환합니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">count</code>인수가 주어졌다면 <code class="language-plaintext highlighter-rouge">count</code>만큼의 값만 치환됩니다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">zip(*iterables)</code></p>

    <ul>
      <li>내장함수</li>
      <li><code class="language-plaintext highlighter-rouge">iterable</code>들의 요소들을 모아 <code class="language-plaintext highlighter-rouge">interator</code>로 만든다.(?) -&gt; 더 알아봐야겠다.</li>
    </ul>
  </li>
</ul>

<h4 id="enumerate"><code class="language-plaintext highlighter-rouge">enumerate</code></h4>

<ul>
  <li>반복문 사용 시 몇 번째 반복문인지 확인이 필요할 때 사용합니다.</li>
  <li>인덱스 번호와 컬렉션의 원소를 tuple 형태로 반환합니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
<span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1"># tuple 형태 반환을 이용하여 아래처럼 활용할 수 있습니다.
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">p</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"index: {}, value: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">p</span><span class="p">))</span>

<span class="n">index</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="mi">1</span>
<span class="n">index</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="mi">5</span>
<span class="n">index</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="mi">3</span>
<span class="n">index</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="mi">6</span>
<span class="n">index</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="mi">2</span>
</code></pre></div></div>

:ET