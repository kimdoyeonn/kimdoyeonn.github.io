I"}<ul>
  <li>
    <p>서버와 클라이언트가 주고받을 때 서로 알아들을 수 있는 기본 규칙이 있어야하는데 그걸 HTTP라고 한다.</p>
  </li>
  <li>굉장히 추상적인 것이기 때문에 지속적으로 보고 익숙해져야한다.</li>
  <li>chrome <code class="language-plaintext highlighter-rouge">검사(inspect) &gt; 네트워크</code> 를 보면 웹서버와 웹브라우저가 서로 주고받은 메세지를 확인할 수 있다.</li>
</ul>

<h2 id="http-request-header">HTTP Request Header</h2>

<p><img src="https://t1.daumcdn.net/cfile/tistory/2673024858FE02AB1F" alt="img" /></p>

<ul>
  <li>GET/POST: 웹 브라우저와 웹 서버가 어떤 방식으로 통신할 것인가
    <ul>
      <li>GET: 주소로 데이터를 가져오는 것</li>
      <li>POST: 데이터를 보내는 <strong>것</strong>?</li>
    </ul>
  </li>
  <li>HTTP/1.1: 웹브라우저가 사용하고있는 http</li>
  <li>Host: 인터넷이 연결되어있는 서버를 구분하는 주소</li>
  <li>User-Agent: 웹브라우저의 다른 말, 운영체계, 어떤 브라우저를 사용하고있는지 정보를 볼 수 있음</li>
  <li>Accept-Encoding: 웹브라우저와 웹서버가 통신할 때 응답하는 데이터의 양이 많으면 웹브라우저가 데이터를 풀어서 처리할 수 있다. 그러면 자원을 아낄 수 있음. 이 때 브라우저가 어떤 압축방식을 처리할 수 있는지 적어놓는 부분</li>
  <li>if-modified-since: 데이터를 매번 모두 전송하면 비효율적이기 때문에 최근에 받은 정보가 언제 업데이트된 정보인지를 저장해놓고 서버에 언제 업데이트된 정보인지를 알려주면 서버가 자신이 가지고있는 데이터의 최신 업데이트 시간과 비교하여 데이터를 보내줄지 말지를 결정한다.</li>
</ul>

<h2 id="http-response-header">HTTP Response Header</h2>

<p><img src="https://jsstudygroup.github.io/jsStudyBlog/assets/images/post/http_resHeader.jpg" alt="http-res-header" /></p>

<ul>
  <li>status: 상태, 성공했는지 실패했는지에 대한 것
    <ul>
      <li>http version</li>
      <li>status code: 응답결과</li>
      <li>phrase: 응답 결과에 대해서 사람이 알아볼 수 있게 풀어서 쓴 것</li>
    </ul>
  </li>
  <li>Content-type: 웹서버가 응답할 때 어떤 형식인지</li>
  <li>Content-Length: 응답하는 데이터의 크기</li>
  <li>Content-Encoding: 어떤 방식으로 풀어서 읽어야하는지</li>
  <li>Last-Modified: 이 정보는 언제 마지막으로 수정되었는지</li>
</ul>

<h3 id="다음에-공부해볼만한-주제">다음에 공부해볼만한 주제</h3>

<ul>
  <li>HTTPS, SSL</li>
  <li>Cache
    <ul>
      <li>내용이 갱신되었을 때 웹브라우저가 그 사실을 알지못한다는 문제가 있음</li>
      <li>윈도우: Ctrl + F5를 하면 캐시가 강제로 업데이트된다.</li>
      <li>성능향상에 관심이 있다면</li>
      <li>cache control, pragma</li>
    </ul>
  </li>
  <li>cookie
    <ul>
      <li>최근에는 web storage</li>
      <li>proxy: 서비스가 점점 복잡해진다면</li>
    </ul>
  </li>
  <li>Developer tools &gt; Network
    <ul>
      <li>chorme</li>
      <li>wireshark: http뿐만 아니라 모든 통신을 확인할 수 있음</li>
    </ul>
  </li>
</ul>

<p>출처: <a href="https://opentutorials.org/course/3385/21673">생활코딩</a></p>
:ET