I"xO<p>참고: doit 자료구조와 함께 배우는 알고리즘 입문</p>

<p>연결 리스트에 데이터를 삽입할 때 노드용 인스턴스를 생성하고, 데이터를 삭제할 때 노드용 인스턴스를 없애면 데이터를 옮기는 문제를 해결할 수 있다. 이러한 노드를 구현하는 클래스 Node를 만들었다. Node는 데이터용 필드 data와는 별도로 자신과 같은 클래스형의 인스턴스를 참조하기 위한 참조용 필드 next를 갖는다. 이처럼 자신과 같은 형의 인스턴스를 참조하는 필드가 있는 구조를 <code class="language-plaintext highlighter-rouge">자기참조(self-referential)형</code>이라고 한다.</p>

<p>여기서 data는 데이터 자체가 아니라 ‘데이터에 대한 참조’이고 next는 ‘노드에 대한 참조’이다.</p>

<p>뒤쪽 노드를 참조하는 필드 next를 뒤쪽 포인터라고 할 때, 뒤쪽 포인터 next에는 뒤쪽 노드에 대한 참조를 저장한다. 뒤쪽 노드가 없는 코리 노드의 뒤쪽 포인터 값은 None이다.</p>

<h3 id="포인터로-연결-리스트-구현하기">포인터로 연결 리스트 구현하기</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>	<span class="c1">#1
</span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Type</span>


<span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="s">"""연결 리스트용 노드 클래스"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="nb">next</span><span class="p">:</span> <span class="n">Node</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="s">"""초기화"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>        <span class="c1"># 데이터
</span>        <span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>        <span class="c1"># 뒤쪽 포인터
</span></code></pre></div></div>

<h4 id="필드">필드</h4>

<ul>
  <li>data: 데이터 (데이터에 대한 참조: 임의의 형)</li>
  <li>next: 뒤쪽 포인터(뒤쪽 노드에 대한 참조: Node형)</li>
</ul>

<h4 id="-__init__함수"><code class="language-plaintext highlighter-rouge"> __init__()</code>함수</h4>

<p>전달받은 data와 next를 해당 필드에 대입합니다. 호출할 때 모두 생략할 수 있으며, 생략할 경우에는 None으로 간주한다.</p>

<p><code class="language-plaintext highlighter-rouge">#1</code> 책이 집필되던 시점에 파이썬에서는 함수에 대한 주석달기로 그 함수가 속한 클래스의 이름을 사용할 수 없다. (<code class="language-plaintext highlighter-rouge">__init__()</code>의 세번째 인수에 <code class="language-plaintext highlighter-rouge">:Node</code>라고 적으면 오류가 발생) 실습에서는 오류가 발생하지 않도록 프로그램 첫버리의 import문을 사용하여 <code class="language-plaintext highlighter-rouge">__future__</code>모듈에서 <code class="language-plaintext highlighter-rouge">annotations</code>를 불러온다. 이는 나중에 지원받을 기능을 미리 사용하기 위한 import문이라고 이해하면 된다. 나중에 파이썬이 업데이트 되어 이 기능을 공식적으로 지원해준다면 import문은 더이상 필요없다.</p>

<h3 id="파이썬의-리스트는-자료구조가-아님">파이썬의 리스트는 자료구조가 아님</h3>

<p>연결리스트는 임의의 위치에 원소를 삽입하거나 삭제할 때 빠르게 수행할 수 있다는 장점이 있다. 하지만 기억 영역(메모리)과 속도 면에서 배열보다 효율이 뒤떨어진다. 파이썬의 리스트는 이러한 연결 리스트의 자료구조가 아니라 모든 원소를 연속으로 메모리에 배치하는 ‘배열’로 내부에서 구현하고 있다. 그러므로 속도가 급격하게 떨어지지 않는다. 또 원소를 하나씩 추가, 삽입할 때마다 내부에서 메모리를 확보하거나 해제하지 않는다. 실제 필요한 메모리보다 여유있게 미리 마련해 놓기 때문이다.</p>

<h3 id="연결-리스트-클래스-linkedlist">연결 리스트 클래스 LinkedList</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LinkedList</span><span class="p">:</span>
    <span class="s">"""연결 리스트 클래스"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""초기화"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">no</span> <span class="o">=</span> <span class="mi">0</span>         <span class="c1"># 노드의 개수
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">None</span>    <span class="c1"># 머리 노드
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 주목 노드
</span>
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s">"""연결 리스트의 노드 개수를 반환"""</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">no</span>
</code></pre></div></div>

<h4 id="필드-1">필드</h4>

<ul>
  <li>no: 리스트에 등록되어 있는 노드의 개수</li>
  <li>head: 머리 노드에 대한 참조</li>
  <li>current: 현재 주목하고 있는 노드에 대한 참조, 주목 포인터, 리스트에서 노드를 검색하여, 그 노드를 주목한 직후에 노드를 삭제하는 등의 용도로 사용한다.</li>
</ul>

<h4 id="초기화하는-__init__함수">초기화하는 <code class="language-plaintext highlighter-rouge">__init__()</code>함수</h4>

<p>노드가 하나도 없는 빈 연결 리스트를 생성한다. 머리 노드를 참조하기 위한 Node형 필드 head에 None을 대입한다.</p>

<p>head는 머리 노드에 대한 참조일뿐 머리 노드 그 자체가 아님에 주의한다. 노드가 존재하지 않는 빈 열결 리스트는 head가 참조하는 곳이 없으므로(참조해야 하는 노드가 존재하지 않으므로) 그 값을 None으로 한다.</p>

<p>주목 포인터 current에도 None을 대입하여 어떤 우너소도 주목하지 않는다.</p>

<h4 id="노드-개수를-반환하는-__len__함수">노드 개수를 반환하는 <code class="language-plaintext highlighter-rouge">__len__()</code>함수</h4>

<p>연결 리스트의 노드 개수를 반환하는 함수이다. no값을 그대로 반환한다.</p>

<blockquote>
  <p>이 함수를 구현하므로써 연결 리스트를 len() 함수의 인수로 전달받을 수 있다.len()함수로 연결리스트의 노드 개수를 알아낼 수 있다.</p>
</blockquote>

<ul>
  <li>
    <p>빈 연결 리스트</p>

    <p>연결 리스트가 비어있을 때(노드가 하나도 존재하지 않을 때) head값은 None입니다. 그러므로 연결 리스트가 비어 있는지는 다음 식을 검사할 수 있다.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span>	<span class="c1"># 연결 리스트가 비어 있는지 확인
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>노드가 1개인 연결 리스트</p>

    <p>이 때 Node형 필드인 head가 참조하는 곳은 머리노드이다. 이 머리노드는 리스트의 꼬리 노드이기도 하므로 뒤쪽 포인터의 값은 None이다.</p>

    <p>head가 참조하는 뒤쪽 포인터의 값이 None이므로 연결 리스트에 존재하는 노드가 하나뿐인지는 다음 식으로 수행할 수 있다.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="bp">None</span>	<span class="c1"># 연결 리스트의 노드가 1개인지 확인
</span></code></pre></div>    </div>
  </li>
  <li>
    <p>노드가 2개인 연결 리스트</p>

    <p>머리 노드는 노드 A이고, 꼬리 노드는 노드 B이다. 이 때 head가 참조하는 곳인 노드 A의 뒤쪽 포인터 next가 노드 B를 참조한다. (곧 head.next가 참조하는 곳은 노드 B). 맨 끝에 위치한 노드 B의 뒤쪽 포인터가 None이므로 연결 리스트의 노드가 2개인지는 다음 식으로 수행할 수 있다.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="bp">None</span>	<span class="c1"># 연결 리스트의 노드가 2개인지 확인
</span></code></pre></div>    </div>

    <p>뒤쪽 포인터가 아니라 데이터를 나타내는 식으로 생각해보면, 노드 A의 데이터에 대한 참조를 나타낸 식은 <code class="language-plaintext highlighter-rouge">head.data</code>이고 노드 B의 데이터에 대한 참조를 나타낸 식은 <code class="language-plaintext highlighter-rouge">head.next.data</code>이다.</p>
  </li>
</ul>

<p>위 세가지 경우의 판단은 no ==  0, no ==  1, no ==  2를 사용할 수 있다.</p>

<ul>
  <li>
    <p>꼬리 노드의 판단</p>

    <p>Node형인 변수 p가 리스트에 있는 노드를 참조한다면, 이때 p가 참조하는 노드가 연결 리스트의 꼬리 노드인지는 다음 식으로 수행할 수 있다.</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span><span class="p">,</span><span class="nb">next</span> <span class="ow">is</span> <span class="bp">None</span>		<span class="c1"># p가 참조하는 노드가 꼬리 노드인지 확인
</span></code></pre></div>    </div>
  </li>
</ul>

<h4 id="검색을-수행하는-search-함수">검색을 수행하는 search() 함수</h4>

<p>인수로 주어진 데이터 data와 값이 같은 노드를 검색하는 함수이다. 검색 알고리즘은 선형 검색을 사용한다. 목적노드를 만날 때까지 머리 노드부터 순서대로 스캔한다.</p>

<p>노드를 스캔할 때 다음 조건 가운데 하나만 성립해도 검색이 종료된다.</p>

<ul>
  <li>종료조건1: 검색 조건을 만족하는 노드를 발견하지 못하고 꼬리 노드까지 왔을 경우</li>
  <li>종료조건2: 검색 조건을 만족하는 노드를 발견한 경우</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="s">"""data와 값이 같은 노드를 검색"""</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">ptr</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>

        <span class="k">while</span> <span class="n">ptr</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">ptr</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">data</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="n">ptr</span>
                <span class="k">return</span> <span class="n">cnt</span>
            <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">ptr</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">.</span><span class="nb">next</span>

        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<h3 id="데이터가-포함되어-있는지-판단하는-__containts__함수">데이터가 포함되어 있는지 판단하는 <code class="language-plaintext highlighter-rouge">__containts__()</code>함수</h3>

<p>리스트에 data와 값이 같은 노드가 포함되어 있는지를 판단하는 함수이다. 포함되어 있으면 True를 반환하고, 그렇지 않으면 False를 반환한다.</p>

<blockquote>
  <p>이를 구현함으로써 연결 리스트에 in 연산자를 적용할 수 있다.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="s">"""연결 리스트에 data가 포함되어 있는지 확인"""</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</code></pre></div></div>

<h3 id="머리에-노드를-삽입하는-add_first함수">머리에 노드를 삽입하는 <code class="language-plaintext highlighter-rouge">add_first()</code>함수</h3>

<p>리스트의 맨 앞에 노드를 삽입하는 함수이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="k">def</span> <span class="nf">add_first</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""맨 앞에 노드를 삽입"""</span>
        <span class="n">ptr</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>     <span class="c1"># 삽입하기 전의 머리 노드
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">ptr</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">no</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<ol>
  <li>삽입하기 전의 머리 노드A를 참조하는 포인터를 ptr에 저장해 둡니다.</li>
  <li>삽입할 노드를 Node(data, ptr)로 생성합니다. 노드의 데이터는 data가 되고, 뒤쪽 포인터가 참조하는 곳은 ptr(삽입하기 전의 머리노드)이 됩니다. 이때 수행하는 대입으로 head는 삽입한 노드를 참조하도록 업데이트됩니다.</li>
</ol>

<blockquote>
  <p>주목 포인터 current도 삽입한 노드를 참조하도록 업데이트합니다. (꼬리에 노드를 삽입하는 add_last()에서도 마찬가지입니다.</p>
</blockquote>

<h3 id="꼬리에-노드를-삽입하는-add_last함수">꼬리에 노드를 삽입하는 <code class="language-plaintext highlighter-rouge">add_last()</code>함수</h3>

<p>리스트의 맨 끝에 노드를 삽입하는 함수입니다. 리스트가 비어 있는지 (head is None이 성립하는지)확인하고 그에 따라 다르게 처리합니다.</p>

<ul>
  <li>
    <p>리스트가 비어 있을 때</p>

    <p>맨 앞에 노드를 삽입하는 것과 같은 처리를 수행하므로 add_first()함수를 호출한다.</p>
  </li>
  <li>
    <p>리스트가 비어 있지 않을 때</p>

    <p>리스트의 맨 끝에 노드를 삽입합니다.</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">add_last</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
        <span class="s">"""맨 끝에 노드를 삽입"""</span>

        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>   <span class="c1"># 리스트가 비어 있으면
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">add_first</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>    <span class="c1"># 맨 앞에 노드를 삽입
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">ptr</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span>
            <span class="k">while</span> <span class="n">ptr</span><span class="p">.</span><span class="nb">next</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">ptr</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">ptr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">no</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<ol>
  <li>
    <p>꼬리를 찾는 과정을 수행합니다. ptr이 참조하는 곳을 그 뒤쪽 포인터로 업데이트하는 과정을 반복하므로써 노드를 맨 앞부터 순서대로 스캔합니다.</p>

    <p>ptr.next가 참조하는 곳이 None으로 되어 있으면 while문이 종료되는 것으로 한다.(꼬리노드)</p>
  </li>
  <li>
    <p>삽입하는 노드를 Node(data, None)로 생성한다. 뒤쪽 포인터를 None으로 하는 것은 맨 끝에 위치한 노드가 어떤 노드도 참조하지 않도록 하기 위한 것이다. 원래 꼬리 노드의 ptr.next가 참조하는 곳이 새로 삽입한 노드가 되도록 업데이트 한다.</p>
  </li>
</ol>

:ET