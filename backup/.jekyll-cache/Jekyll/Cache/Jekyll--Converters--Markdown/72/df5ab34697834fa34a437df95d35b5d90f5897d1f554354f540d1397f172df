I"<p>참고: <a href="https://programmers.co.kr/learn/courses/30/lessons/42583">프로그래머스</a></p>

<h6 id="문제-설명">문제 설명</h6>

<p>트럭 여러 대가 강을 가로지르는 일 차선 다리를 정해진 순으로 건너려 합니다. 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 알아내야 합니다. 트럭은 1초에 1만큼 움직이며, 다리 길이는 bridge_length이고 다리는 무게 weight까지 견딥니다.
※ 트럭이 다리에 완전히 오르지 않은 경우, 이 트럭의 무게는 고려하지 않습니다.</p>

<p>예를 들어, 길이가 2이고 10kg 무게를 견디는 다리가 있습니다. 무게가 [7, 4, 5, 6]kg인 트럭이 순서대로 최단 시간 안에 다리를 건너려면 다음과 같이 건너야 합니다.</p>

<table>
  <thead>
    <tr>
      <th>경과 시간</th>
      <th>다리를 지난 트럭</th>
      <th>다리를 건너는 트럭</th>
      <th>대기 트럭</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>[]</td>
      <td>[]</td>
      <td>[7,4,5,6]</td>
    </tr>
    <tr>
      <td>1~2</td>
      <td>[]</td>
      <td>[7]</td>
      <td>[4,5,6]</td>
    </tr>
    <tr>
      <td>3</td>
      <td>[7]</td>
      <td>[4]</td>
      <td>[5,6]</td>
    </tr>
    <tr>
      <td>4</td>
      <td>[7]</td>
      <td>[4,5]</td>
      <td>[6]</td>
    </tr>
    <tr>
      <td>5</td>
      <td>[7,4]</td>
      <td>[5]</td>
      <td>[6]</td>
    </tr>
    <tr>
      <td>6~7</td>
      <td>[7,4,5]</td>
      <td>[6]</td>
      <td>[]</td>
    </tr>
    <tr>
      <td>8</td>
      <td>[7,4,5,6]</td>
      <td>[]</td>
      <td>[]</td>
    </tr>
  </tbody>
</table>

<p>따라서, 모든 트럭이 다리를 지나려면 최소 8초가 걸립니다.</p>

<p>solution 함수의 매개변수로 다리 길이 bridge_length, 다리가 견딜 수 있는 무게 weight, 트럭별 무게 truck_weights가 주어집니다. 이때 모든 트럭이 다리를 건너려면 최소 몇 초가 걸리는지 return 하도록 solution 함수를 완성하세요.</p>

<h5 id="제한-조건">제한 조건</h5>

<ul>
  <li>bridge_length는 1 이상 10,000 이하입니다.</li>
  <li>weight는 1 이상 10,000 이하입니다.</li>
  <li>truck_weights의 길이는 1 이상 10,000 이하입니다.</li>
  <li>모든 트럭의 무게는 1 이상 weight 이하입니다.</li>
</ul>

<h5 id="입출력-예">입출력 예</h5>

<table>
  <thead>
    <tr>
      <th>bridge_length</th>
      <th>weight</th>
      <th>truck_weights</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2</td>
      <td>10</td>
      <td>[7,4,5,6]</td>
      <td>8</td>
    </tr>
    <tr>
      <td>100</td>
      <td>100</td>
      <td>[10]</td>
      <td>101</td>
    </tr>
    <tr>
      <td>100</td>
      <td>100</td>
      <td>[10,10,10,10,10,10,10,10,10,10]</td>
      <td>110</td>
    </tr>
  </tbody>
</table>

<p><a href="http://icpckorea.org/2016/ONLINE/problem.pdf">출처</a></p>

<h3 id="내-풀이">내 풀이</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solution2</span><span class="p">(</span><span class="n">bridge_length</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">truck_weights</span><span class="p">):</span>
    <span class="n">bridge</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">time</span> <span class="o">=</span> <span class="mi">0</span>    <span class="c1"># 경과 시간
</span>    <span class="n">pt</span> <span class="o">=</span> <span class="mi">0</span>      <span class="c1"># 건널 차 리스트의 포인터
</span>    <span class="n">temp</span> <span class="o">=</span> <span class="mi">0</span>    <span class="c1"># 모든 차가 다 지나가면 탈출
</span>    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">truck_weights</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">:</span>
        <span class="c1"># 트럭 무게 리스트의 범위를 벗어나지 않기 위해
</span>        <span class="k">if</span> <span class="n">pt</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">truck_weights</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">sum</span><span class="p">(</span><span class="n">bridge</span><span class="p">)</span> <span class="o">+</span> <span class="n">truck_weights</span><span class="p">[</span><span class="n">pt</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">weight</span><span class="p">:</span>
            <span class="n">bridge</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">truck_weights</span><span class="p">[</span><span class="n">pt</span><span class="p">])</span>
            <span class="n">pt</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">bridge</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">bridge</span><span class="p">)</span> <span class="o">==</span> <span class="n">bridge_length</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">bridge</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="n">temp</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">del</span> <span class="n">bridge</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

        <span class="n">time</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">time</span><span class="o">+</span><span class="mi">1</span>
</code></pre></div></div>

<ul>
  <li>pt가 truck_weights의 범위를 벗어났을 때, 다음 트럭의 무게와 다리 위 트럭들의 무게를 계산해서 트럭이 올라갈 수 있는지 없는지 계산해주는 조건문이 실행될 경우 예외가 발생하기 때문에 <code class="language-plaintext highlighter-rouge">pt &lt; len(truck_weights)</code>를 조건문에 추가해서 거짓일 경우 and 뒤의 조건문을 실행하지 않게 했다.</li>
  <li>다리 위에 트럭이 올라갈 수 있으면 bridge 리스트에 트럭의 무게를 append해주고 pt를 +1해준다.</li>
  <li>다리 위에 트럭이 올라갈 수 없으면 bridge 리스트에 0을 append 해준다.</li>
  <li>만약 bridge 리스트의 길이가 문제에서 주어진 다리의 길이가 되면 제일 먼저 append된 bridge[0] 값을 지워주는데 이 값이 0이 아니라면 트럭이 다리에서 내려왔다는 의미로 temp에 +1을 해준다.</li>
  <li>위 과정을 지나야하는 트럭의 개수보다 temp가 작은 동안 반복해준다.</li>
  <li>while이 끝났을 때 time은 마지막 트럭이 내려오는데 걸린 시간을 계산하지 않은 상태이므로 트럭이 내려오는데 걸린 시간을 추가로 계산 해준다. (time + 1)</li>
</ul>
:ET