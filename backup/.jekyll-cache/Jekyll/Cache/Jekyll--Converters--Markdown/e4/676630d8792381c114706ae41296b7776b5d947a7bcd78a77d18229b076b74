I""!<p>참고: doit 자료구조와 함께 배우는 알고리즘 입문</p>

<h3 id="노드-삭제">노드 삭제</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">remove_current_node</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""주목 노드 삭제"""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_empty</span><span class="p">():</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="n">prev</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="nb">next</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="n">prev</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="n">prev</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="n">prev</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">no</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>
    
    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="n">Node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""노드 p를 삭제"""</span>
        <span class="n">ptr</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>

        <span class="k">while</span> <span class="n">ptr</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">ptr</span> <span class="ow">is</span> <span class="n">p</span><span class="p">:</span>                <span class="c1"># p를 발견
</span>                <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="n">p</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">remove_current_node</span><span class="p">()</span>
                <span class="k">break</span>
            <span class="n">ptr</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">.</span><span class="nb">next</span>

    <span class="k">def</span> <span class="nf">remove_first</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""머리 노드 삭제"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span>   <span class="c1"># 머리 노드 head.next를 삭제
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">remove_current_node</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">remove_last</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""꼬리 노드 삭제"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">prev</span>   <span class="c1"># 꼬리 노드 head.prev를 삭제
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">remove_current_node</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">clear</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""모든 노드를 삭제"""</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_empty</span><span class="p">():</span>      <span class="c1"># 리스트 전체가 빌 때까지
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">remove_first</span><span class="p">()</span>         <span class="c1"># 머리 노드를 삭제
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">no</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<h3 id="이터레이터">이터레이터</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">DoubleLinkedListReverseIterator</span><span class="p">:</span>
    <span class="s">"""DoubleLinkedList의 내림차순 이터레이터 클래스"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">:</span> <span class="n">Node</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">head</span> <span class="o">=</span> <span class="n">head</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="n">prev</span>

    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">DoubleLinkedListReverseIterator</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="ow">is</span> <span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">StopIteration</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="n">data</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">current</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">current</span><span class="p">.</span><span class="n">prev</span>
            <span class="k">return</span> <span class="n">data</span>
</code></pre></div></div>

:ET