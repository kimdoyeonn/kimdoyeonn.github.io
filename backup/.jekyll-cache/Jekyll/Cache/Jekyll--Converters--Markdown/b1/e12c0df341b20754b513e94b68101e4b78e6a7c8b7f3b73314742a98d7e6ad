I".<p>참고: <a href="https://www.acmicpc.net/problem/2011">백준</a></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">시간 제한</th>
      <th style="text-align: left">메모리 제한</th>
      <th style="text-align: left">제출</th>
      <th style="text-align: left">정답</th>
      <th style="text-align: left">맞은 사람</th>
      <th style="text-align: left">정답 비율</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">2 초</td>
      <td style="text-align: left">128 MB</td>
      <td style="text-align: left">30222</td>
      <td style="text-align: left">5150</td>
      <td style="text-align: left">3767</td>
      <td style="text-align: left">19.313%</td>
    </tr>
  </tbody>
</table>

<h2 id="문제">문제</h2>

<p>상근이와 선영이가 다른 사람들이 남매간의 대화를 듣는 것을 방지하기 위해서 대화를 서로 암호화 하기로 했다. 그래서 다음과 같은 대화를 했다.</p>

<ul>
  <li>상근: 그냥 간단히 암호화 하자. A를 1이라고 하고, B는 2로, 그리고 Z는 26으로 하는거야.</li>
  <li>선영: 그럼 안돼. 만약, “BEAN”을 암호화하면 25114가 나오는데, 이걸 다시 글자로 바꾸는 방법은 여러 가지가 있어.</li>
  <li>상근: 그렇네. 25114를 다시 영어로 바꾸면, “BEAAD”, “YAAD”, “YAN”, “YKD”, “BEKD”, “BEAN” 총 6가지가 나오는데, BEAN이 맞는 단어라는건 쉽게 알수 있잖아?</li>
  <li>선영: 예가 적절하지 않았네 ㅠㅠ 만약 내가 500자리 글자를 암호화 했다고 해봐. 그 때는 나올 수 있는 해석이 정말 많은데, 그걸 언제 다해봐?</li>
  <li>상근: 얼마나 많은데?</li>
  <li>선영: 구해보자!</li>
</ul>

<p>어떤 암호가 주어졌을 때, 그 암호의 해석이 몇 가지가 나올 수 있는지 구하는 프로그램을 작성하시오.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 5000자리 이하의 암호가 주어진다. 암호는 숫자로 이루어져 있다.</p>

<h2 id="출력">출력</h2>

<p>나올 수 있는 해석의 가짓수를 구하시오. 정답이 매우 클 수 있으므로, 1000000으로 나눈 나머지를 출력한다.</p>

<p>암호가 잘못되어 암호를 해석할 수 없는 경우에는 0을 출력한다.</p>

<h2 id="예제-입력-1-복사">예제 입력 1 복사</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>25114
</code></pre></div></div>

<h2 id="예제-출력-1-복사">예제 출력 1 복사</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6
</code></pre></div></div>

<h4 id="내-풀이">내 풀이</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">code</span> <span class="o">=</span> <span class="p">[</span><span class="s">'0'</span><span class="p">]</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">))</span>
<span class="k">if</span> <span class="n">code</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">'0'</span><span class="p">:</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">)):</span>
        <span class="n">temp1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">code</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
        <span class="n">temp2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">code</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">]))</span>
        <span class="k">if</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">temp1</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">:</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="mi">9</span> <span class="o">&lt;</span> <span class="n">temp2</span> <span class="o">&lt;=</span> <span class="mi">26</span><span class="p">:</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">%=</span> <span class="mi">1000000</span>


<span class="k">print</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<p>A ~ Z는 1~26의 암호코드로 바꿀 수 있고 여기서 암호코드의 경우의 수에 영향을 주는 것은 자릿수이므로 1~26의 암호는 한자릿수인 1~9와 10~26으로 나눌 수 있다.</p>

<ul>
  <li>
    <p>n이 한자릿수 암호인 경우</p>

    <p><code class="language-plaintext highlighter-rouge">dp[n] = dp[n-1]</code></p>
  </li>
  <li>
    <p>n이 두자릿수에서 일의 자리인 암호인 경우</p>

    <p><code class="language-plaintext highlighter-rouge">dp[n] = dp[n-2]</code></p>
  </li>
</ul>

<p>dp[0] = 1, dp[1] = 1로 넣어놓고 반복문을 돌렸더니 결과를 구할 수 있었다. dp[2]는 경우에 따라 경우의 수가 달라질 수 있기 때문에 임의로 초기값을 정해주면 제대로 된 결과가 나오지 않을 수도 있다.</p>
:ET