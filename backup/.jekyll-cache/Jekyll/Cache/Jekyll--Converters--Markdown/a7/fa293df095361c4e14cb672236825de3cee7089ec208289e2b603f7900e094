I"S<p>참고: <a href="https://www.youtube.com/watch?v=m-9pAwq1o3w&amp;list=PLRx0vPvlEmdAghTr5mXQxGpHjWqSz0dgC">동빈나 유튜브</a></p>

<ul>
  <li>내장함수: 기본 입출력 함수부터 정렬 함수까지 기본적인 함수들을 제공합니다.</li>
  <li>itertools: 파이썬에서 반복되는 형태의 데이터를 처리하기 위한 유용한 기능들을 제공합니다.
    <ul>
      <li>특히 순열과 조합 라이브러리는 코딩 테이트에서 자주 사용합니다. (완전탐색)</li>
    </ul>
  </li>
  <li>heapq: 힙(Heap) 자료구조를 제공합니다.
    <ul>
      <li>일반적으로 우선순위 큐 기능을 구현하기 위해 사용합니다.</li>
    </ul>
  </li>
  <li>
    <p>bisect: 이진 탐색(Binary Search) 기능을 제공합니다.</p>
  </li>
  <li>collections: 덱(deque), 카운터(Counter) 등의 유용한 자료구조를 포함합니다.</li>
  <li>math: 필수적인 수학적 기능을 제공합니다.
    <ul>
      <li>팩토리얼, 제곱근, 최대공약수(GCD), 삼각함수 관련 함수부터 파이(pi)와 같은 상수를 포함합니다.</li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">sum()</code> 리스트의 합</p>

<p><code class="language-plaintext highlighter-rouge">min()</code>, <code class="language-plaintext highlighter-rouge">max()</code> 최숫값 최솟값</p>

<p><code class="language-plaintext highlighter-rouge">eval()</code> 사람의 입장에서 작성된 수식을 계산하여 반환</p>

<p><code class="language-plaintext highlighter-rouge">sorted()</code> 반복가능한 객체를 정렬</p>

<p>​ key 속성으로 정렬 기준을 정의해줄 수 있음</p>

<h4 id="순열과-조합">순열과 조합</h4>

<ul>
  <li>itertools 라이브러리를 사용</li>
  <li><strong>순열</strong>: 서로 다른 n 개에서 서로 다른 r개를 선택하여 일렬로 나열하는 것</li>
  <li><strong>조합</strong>: 서로 다른 n 개에서 순서에 상관없이 서로 다른 r개를 선택하는 것</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">permutations</span><span class="p">,</span> <span class="n">combinations</span><span class="p">,</span> <span class="n">product</span><span class="p">,</span> <span class="n">combinations_with_replacement</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">]</span> <span class="c1"># 데이터 준비
</span>
<span class="n">result1</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">permutations</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># 모든 순열 구하기 (3개롤 골라 순서를 고려하여)
</span><span class="n">result2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">combinations</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1"># 모든 조합 구하기 (2개를 뽑아 순서를 고려하지 않고)
</span><span class="n">result3</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">product</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span> <span class="c1"># 2개를 뽑는 모든 순열 구하기 (중복순열)
</span><span class="n">result4</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">combinations_with_replacement</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1"># 2개를 뽑는 모든 조합 구하기(중복조합)
</span></code></pre></div></div>

<h4 id="counter">Counter</h4>

<ul>
  <li>파이썬 collections 라이브러리의 <strong>Counter</strong>는 등장 횟수를 세는 기능을 제공합니다.</li>
  <li>리스트와 같은 반복 가능한(iterable) 객체가 주어졌을 때 내부의 원소가 몇 번씩 등장했는지를 알려줍니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Conunter</span>

<span class="n">counter</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">([</span><span class="s">'red'</span><span class="p">,</span> <span class="s">'blue'</span><span class="p">,</span> <span class="s">'red'</span><span class="p">,</span> <span class="s">'green'</span><span class="p">,</span> <span class="s">'blue'</span><span class="p">,</span> <span class="s">'blue'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">counter</span><span class="p">[</span><span class="s">'blue'</span><span class="p">])</span> <span class="c1"># 'blue'가 등장한 횟수 출력
</span><span class="k">print</span><span class="p">(</span><span class="n">counter</span><span class="p">[</span><span class="s">'green'</span><span class="p">])</span> <span class="c1"># 'green'이 등장한 횟수 출력
</span><span class="k">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="n">counter</span><span class="p">))</span>	<span class="c1"># 사전 자료형으로 반환
</span></code></pre></div></div>

<h4 id="최대-공약수와-최소-공배수">최대 공약수와 최소 공배수</h4>

<ul>
  <li>최대 공약수를 구해야 할 때 math 라이브러리의 gcd() 함수를 이용할 수 있습니다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>

<span class="c1"># 최소 공배수(LCM)을 구하는 함수
</span><span class="k">def</span> <span class="nf">lcm</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span> <span class="o">//</span> <span class="n">math</span><span class="p">.</span><span class="n">gcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>

<span class="n">a</span> <span class="o">=</span> <span class="mi">21</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">14</span>

<span class="k">print</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">gcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span> <span class="c1"># 최대 공약수(GCD) 계산
</span><span class="k">print</span><span class="p">(</span><span class="n">lcm</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">14</span><span class="p">))</span> <span class="c1"># 최소 공배수(LCM) 계산
</span></code></pre></div></div>

<ul>
  <li>팩토리얼, 재곱근 함수, 원주율 상수 등등을 사용할 수 있음</li>
</ul>
:ET