I"O/<h2 id="-변수">✅ 변수</h2>

<ul>
  <li>프로그래밍은 데이터를 처리하는 것, 이 때 변수는 데이터를 쉽게 저장하고 꺼내쓰기 위해 사용한다.</li>
  <li>변수의 선언과 값의 할당
    <ul>
      <li>변수의 선언은 <code class="language-plaintext highlighter-rouge">var</code>, <code class="language-plaintext highlighter-rouge">let</code>, <code class="language-plaintext highlighter-rouge">const</code>를 사용
        <ul>
          <li><code class="language-plaintext highlighter-rouge">var</code>: 재선언 가능, 재할당 가능, 추천하지 않음</li>
          <li><code class="language-plaintext highlighter-rouge">let</code>: 재선언 불가능, 재할당 가능, 값이 바뀔 경우 사용</li>
          <li><code class="language-plaintext highlighter-rouge">const</code>: 재선언 불가능, 재할당 불가능, 바뀌지 않을 변수를 선언할 때 사용</li>
          <li>모든 변수를 <code class="language-plaintext highlighter-rouge">const</code>로 선언하고 코딩을 하다가 재할당을 해야되는 변수는 <code class="language-plaintext highlighter-rouge">let</code>으로 수정하면 됨</li>
        </ul>
      </li>
      <li>값의 할당은 할당 연산자 <code class="language-plaintext highlighter-rouge">=</code>을 사용한다. 오른쪽에 있는 값을 왼쪽에 변수에 할당한다.
        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span><span class="p">;</span> <span class="c1">// 변수 선언</span>
<span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">san</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 값 할당</span>
<span class="kd">let</span> <span class="nx">myName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">yeon</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// 변수 선언과 값 할당을 동시에 할 수 있음</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="-타입">✅ 타입</h2>

<ul>
  <li>
    <p>원시 자료형, 참조 자료형</p>

    <ul>
      <li>원시자료형: String, Number, Boolean, undefined, Bigint, Symbol
        <ul>
          <li>String: 문자열, <code class="language-plaintext highlighter-rouge">"</code> <code class="language-plaintext highlighter-rouge">'</code> <code class="language-plaintext highlighter-rouge">`</code>으로 감싼 모든 값, 여는 문자와 닫는 문자가 동일해야함</li>
          <li>Number: 숫자</li>
          <li>Boolean: <code class="language-plaintext highlighter-rouge">true</code> <code class="language-plaintext highlighter-rouge">false</code></li>
          <li>undefined: 정의되지 않음, 아무 값도 넣지 않았을 경우, 변수에 값할당을 하지 않았을 경우, return이 없는 함수에서 반환값을 받으려 할 경우</li>
          <li>Bigint
            <ul>
              <li>Number가 나타낼 수 있는 최대치인 2^53 - 1보다 큰 정수를 표현할 수 있음</li>
              <li>Number와 혼합하여 사용할 수 없다. 계산을 하려면 같은 자료형을 변환해야 하는데 BigInt를 Number로 변환할 경우 값의 정확성을 잃을 수 있다.</li>
              <li>정수리터럴 뒤에 <code class="language-plaintext highlighter-rouge">n</code>을 붙이거나 함수 <code class="language-plaintext highlighter-rouge">Bigint()</code>를 호출해서 사용할 수 있음</li>
            </ul>
          </li>
          <li>Symbol
            <ul>
              <li>ECMAScript 6에서 추가됨</li>
              <li>유일하고 변경불가능한 값(immutable)</li>
              <li>객체 속성의 key값으로 사용가능</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>참조자료형: 배열, 객체, 함수</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">typeof</code></p>
    <ul>
      <li>값이 어떤 자료형을 가지고 있는지 확인할 수 있다.</li>
      <li>참조자료형에서는 배열, 객체, 함수에 상관없이 <code class="language-plaintext highlighter-rouge">object</code>를 반환하기 때문에 원시자료형에 사용할 때만 유의미한 결과를 얻을 수 있다.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="함수">✅함수</h2>

<ul>
  <li>
    <p>작은 기능의 단위, 명령의 모음</p>
  </li>
  <li>선언식
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sayHi</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`</span><span class="err">Hi, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>표현식</p>

    <ul>
      <li>변수를 선언하고 익명함수를 생성한 후, 변수에 익명함수를 할당함</li>
    </ul>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="s2">`</span><span class="err">Hi, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div>    </div>
  </li>
  <li>화살표 함수
    <ul>
      <li>표현식에서 쓰던 익명함수를 화살표를 사용한 함수로 바뀌서 작성한다.</li>
      <li>함수가 짧을 경우 소괄호를 사용하거나, 괄호 없이 작성하면 return을 생략하고 작성할 수 있다.</li>
      <li><code class="language-plaintext highlighter-rouge">{}</code>를 사용하면 return을 작성해주어야 함
        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">sayHi</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="err">Hi, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">sayHi</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">return</span> <span class="s2">`</span><span class="err">Hi, </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>함수 이름에 <code class="language-plaintext highlighter-rouge">()</code>를 붙여 호출한다.</li>
  <li>parameter: 함수를 선언할 때 정해지는, 함수에 전달될 변수, let 없어도됨</li>
  <li>argument: 함수를 호출할 때 함수에 값을 전달하는 변수</li>
</ul>

<hr />

<h2 id="조건문">✅조건문</h2>

<ul>
  <li>
    <p>truthy, falsy가 조건문에서 동작하는 방식</p>

    <ul>
      <li>JavaScript에서 불리언이 기대되는 문맥에서 <code class="language-plaintext highlighter-rouge">true</code>나 <code class="language-plaintext highlighter-rouge">false</code>로 평가되는 값들</li>
      <li><code class="language-plaintext highlighter-rouge">falsy</code> : undefined, null, 0, -0, NaN, false, ‘‘…</li>
      <li><code class="language-plaintext highlighter-rouge">truthy</code> : <code class="language-plaintext highlighter-rouge">falsy</code> 가 아닌 모든 값들</li>
    </ul>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span>
<span class="k">if</span> <span class="p">({})</span>
<span class="k">if</span> <span class="p">([])</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(</span><span class="dl">"</span><span class="s2">0</span><span class="dl">"</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(</span><span class="dl">"</span><span class="s2">false</span><span class="dl">"</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">())</span>
<span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="mi">42</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(</span><span class="mi">12</span><span class="nx">n</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(</span><span class="mf">3.14</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="mf">3.14</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(</span><span class="kc">Infinity</span><span class="p">)</span>
<span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">)</span>
</code></pre></div>    </div>

    <p>다른 언어들처럼 <code class="language-plaintext highlighter-rouge">==</code> <code class="language-plaintext highlighter-rouge">!=</code>을 사용해서 연산하면 혼란이 생길 수 있음
truthy와 falsy를 생각하지 않고 값을 비교할 수 있도록 엄격한 비교(<code class="language-plaintext highlighter-rouge">===</code>, <code class="language-plaintext highlighter-rouge">!==</code>)를 사용한다.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">if</code>, <code class="language-plaintext highlighter-rouge">else if</code>, <code class="language-plaintext highlighter-rouge">else</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">if</code>: 조건에 대한 참, 거짓에 따라 데이터를 다르게 계산하고 싶을 때 조건문과 함께 사용</li>
      <li><code class="language-plaintext highlighter-rouge">else if</code>: <code class="language-plaintext highlighter-rouge">if</code>에서 <code class="language-plaintext highlighter-rouge">false</code>로 걸러진 데이터을 다른 조건으로 다시 거르고 싶을 때 사용, 여러개 연결해서 사용해도 됨</li>
      <li><code class="language-plaintext highlighter-rouge">else</code>: <code class="language-plaintext highlighter-rouge">if</code>의 조건도 아니고 <code class="language-plaintext highlighter-rouge">else if</code>의 조건도 아닐 때 실행할 코드</li>
    </ul>
  </li>
  <li>논리 연산자: <code class="language-plaintext highlighter-rouge">&amp;&amp;</code>, <code class="language-plaintext highlighter-rouge">||</code>, <code class="language-plaintext highlighter-rouge">!</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">A &amp;&amp; B</code>: 논리곱, A와 B 모두 참일 때만 참</li>
      <li><code class="language-plaintext highlighter-rouge">A || B</code>: 논리합, A와 B 둘 중 하나라도 참이면 참, 둘 다 거짓이어야 거짓</li>
      <li><code class="language-plaintext highlighter-rouge">!A</code>: 부정연산, 참을 거짓으로, 거짓을 참으로</li>
    </ul>
  </li>
</ul>

<p>출처: <a href="https://developer.mozilla.org/ko/docs/Glossary/Truthy">참 같은 값</a></p>
:ET