I"h<h6 id="문제-설명">문제 설명</h6>

<p>1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1-1. 입력된 수가 짝수라면 2로 나눕니다.
1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.
</code></pre></div></div>

<p>예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요. 단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.</p>

<h5 id="제한-사항">제한 사항</h5>

<ul>
  <li>입력된 수, <code class="language-plaintext highlighter-rouge">num</code>은 1 이상 8000000 미만인 정수입니다.</li>
</ul>

<h5 id="입출력-예">입출력 예</h5>

<table>
  <thead>
    <tr>
      <th>n</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>6</td>
      <td>8</td>
    </tr>
    <tr>
      <td>16</td>
      <td>4</td>
    </tr>
    <tr>
      <td>626331</td>
      <td>-1</td>
    </tr>
  </tbody>
</table>

<h5 id="입출력-예-설명">입출력 예 설명</h5>

<p>입출력 예 #1
문제의 설명과 같습니다.</p>

<p>입출력 예 #2
16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1 이되어 총 4번만에 1이 됩니다.</p>

<p>입출력 예 #3
626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야합니다.</p>

<h3 id="내-풀이">내 풀이</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">solution</span><span class="o">(</span><span class="kt">long</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="c1">//i 가 500이되면 답은 -1</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">//num이 1이 될 때까지 반복문을 돌림</span>
        <span class="k">while</span><span class="o">(</span><span class="n">num</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">){</span>
            <span class="c1">//num이 짝수면 나누기 2 아니면 곱하기 3 더하기 1</span>
            <span class="c1">//삼항연산자로 바꾸어 사용할 수 있음</span>
            <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                <span class="n">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="n">i</span><span class="o">++;</span>
            <span class="o">}</span><span class="c1">//end else</span>

            <span class="c1">//i가 500이면 답이 -1이 되고 결과를 출력</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">500</span><span class="o">){</span>
                <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span><span class="c1">//end if</span>
        <span class="o">}</span><span class="c1">//end while</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span><span class="c1">//solution</span>
</code></pre></div></div>

<ul>
  <li>반복문이 500까지만 돌 수 있으므로 처음부터 500번만 도는 반복문을 사용하는 방법</li>
  <li>삼항연산자를 사용하는 방법 -&gt; 삼항연산자는 연산자이기 때문에 if문보다 속도가 빠르다고함</li>
</ul>
:ET