I"9<p>출처 : <a href="https://www.acmicpc.net/problem/14888">https://www.acmicpc.net/problem/14888</a></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">시간 제한</th>
      <th style="text-align: left">메모리 제한</th>
      <th style="text-align: left">제출</th>
      <th style="text-align: left">정답</th>
      <th style="text-align: left">맞은 사람</th>
      <th style="text-align: left">정답 비율</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">2 초</td>
      <td style="text-align: left">512 MB</td>
      <td style="text-align: left">41776</td>
      <td style="text-align: left">22033</td>
      <td style="text-align: left">13762</td>
      <td style="text-align: left">49.379%</td>
    </tr>
  </tbody>
</table>

<h2 id="문제">문제</h2>

<p>N개의 수로 이루어진 수열 A1, A2, …, AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.</p>

<p>우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.</p>

<p>예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 예를 들어, 아래와 같은 식을 만들 수 있다.</p>

<ul>
  <li>1+2+3-4×5÷6</li>
  <li>1÷2+3+4-5×6</li>
  <li>1+2÷3×4-5+6</li>
  <li>1÷2×3-4+5+6</li>
</ul>

<p>식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.</p>

<ul>
  <li>1+2+3-4×5÷6 = 1</li>
  <li>1÷2+3+4-5×6 = 12</li>
  <li>1+2÷3×4-5+6 = 5</li>
  <li>1÷2×3-4+5+6 = 7</li>
</ul>

<p>N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.</p>

<h2 id="입력">입력</h2>

<p>첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 둘째 줄에는 A1, A2, …, AN이 주어진다. (1 ≤ Ai ≤ 100) 셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다.</p>

<h2 id="출력">출력</h2>

<p>첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.</p>

<h2 id="예제-입력-1-복사">예제 입력 1 복사</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
5 6
0 0 1 0
</code></pre></div></div>

<h2 id="예제-출력-1-복사">예제 출력 1 복사</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>30
30
</code></pre></div></div>

<h2 id="예제-입력-2-복사">예제 입력 2 복사</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
3 4 5
1 0 1 0
</code></pre></div></div>

<h2 id="예제-출력-2-복사">예제 출력 2 복사</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>35
17
</code></pre></div></div>

<h2 id="예제-입력-3-복사">예제 입력 3 복사</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6
1 2 3 4 5 6
2 1 1 1
</code></pre></div></div>

<h2 id="예제-출력-3-복사">예제 출력 3 복사</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>54
-24
</code></pre></div></div>

<h3 id="내-풀이">내 풀이</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">nums</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>
<span class="n">opers</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>

<span class="n">max_val</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="o">-</span><span class="mf">1e10</span><span class="p">)</span>
<span class="n">min_val</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">1e10</span><span class="p">)</span>

<span class="c1"># num_idx - 지금 계산할 숫자
# opers - 남은 연산자 개수 리스트
# result - 직전에 계산된 결과
</span><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">num_idx</span><span class="p">,</span> <span class="n">opers</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">max_val</span><span class="p">,</span> <span class="n">min_val</span>

    <span class="c1"># opers가 모두 0일 경우 (= 남은 연산자가 없을 경우)
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span><span class="n">opers</span><span class="p">):</span>
        <span class="n">max_val</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">max_val</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
        <span class="n">min_val</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">min_val</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">result</span><span class="p">))</span>
        <span class="k">return</span>

    <span class="c1"># 남은 연산자를 사용해서 하나씩 계산
</span>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">oper</span><span class="p">,</span> <span class="n">o_cnt</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">([</span><span class="s">"+"</span><span class="p">,</span> <span class="s">"-"</span><span class="p">,</span> <span class="s">"*"</span><span class="p">,</span> <span class="s">"//"</span><span class="p">],</span> <span class="n">opers</span><span class="p">)):</span>
        <span class="c1"># 연산자가 있을 경우
</span>        <span class="k">if</span> <span class="n">o_cnt</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="c1"># result와 num[num_idx]를 사용해서 연산하고 사용한 연산은 -1
</span>
            <span class="c1"># result가 음수이고 연산자가 //일 때 원하는 값이 나오지 않으므로(올림값에 -가 붙여서 나옴)
</span>            <span class="c1"># 원하는 값을 얻기 위해 조건문을 사용하여 따로 연산
</span>            <span class="k">if</span> <span class="n">oper</span> <span class="o">==</span> <span class="s">"//"</span> <span class="ow">and</span> <span class="n">result</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="o">-</span><span class="nb">eval</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span> <span class="o">+</span> <span class="n">oper</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">num_idx</span><span class="p">]))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">temp</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">+</span> <span class="n">oper</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">num_idx</span><span class="p">]))</span>
            <span class="n">opers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="c1"># 다음 연산을 위해 num_idx+1, 남은 연산자 개수 리스트 opers, 지금 연산의 결과 temp를 사용해서 재귀
</span>            <span class="n">dfs</span><span class="p">(</span><span class="n">num_idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">opers</span><span class="p">,</span> <span class="n">temp</span><span class="p">)</span>

            <span class="n">opers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>


<span class="n">dfs</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">opers</span><span class="p">,</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">max_val</span><span class="p">,</span> <span class="n">min_val</span><span class="p">)</span>
</code></pre></div></div>

<p>식의 결과가 최소인 것과 최대인 것을 구하려면 모든 경우를 계산해봐야 알 수 있으므로 <code class="language-plaintext highlighter-rouge">DFS 알고리즘</code>을 사용하여 풀었다.</p>

<p>매개변수로 현재 사용할 숫자의 인덱스(<code class="language-plaintext highlighter-rouge">num_idx</code>), 남은 연산자의 개수 리스트(<code class="language-plaintext highlighter-rouge">opers</code>), 지금까지 계산된 결과(<code class="language-plaintext highlighter-rouge">result</code>)를 가지는 dfs 함수를 반복하면서 <code class="language-plaintext highlighter-rouge">opers</code>의 값들이 전부 0이 될 때 최솟값과 최댓값 연산을 하도록 했다.</p>

<p>n = 3
nums = [3, 4, 5]
opers = [1, 0, 1, 0]</p>

<p>dfs(두번째 수의 인덱스, opers, 첫 번째 수) -&gt; <code class="language-plaintext highlighter-rouge">dfs(1, [1, 0, 1, 0], 3)</code></p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">dfs(1, [1, 0, 1, 0], 3)</code></p>

    <p><code class="language-plaintext highlighter-rouge">not any([1,0,1,0])</code>는  <code class="language-plaintext highlighter-rouge">False</code>이므로 return이 실행되지 않음</p>

    <p>그 다음 <code class="language-plaintext highlighter-rouge">opers</code>에 for문을 돌면서 0이 아닌 값을 찾는다. 현재 opers[0] = 1 이므로 “+” 연산을 수행하고 수행한 횟수는 업데이트 해준다. 
opers  = [0,0,1,0]
temp = 3 + nums[1] = 3 + 4 = 7</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">dfs(2, [0, 0, 1, 0], 7)</code></p>

    <p><code class="language-plaintext highlighter-rouge">not any([0,0,1,0])</code>는  <code class="language-plaintext highlighter-rouge">False</code>이므로 return이 실행되지 않음</p>

    <p>“*“연산을 수행하고 수행한 횟수를 업데이트
opers = [0,0,0,0]
temp = 7*num[2] = 7*5 = 35</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">dfs(3, [0, 0, 0, 0], 35)</code></p>

    <p><code class="language-plaintext highlighter-rouge">not any([0,0,0,0])</code>는  <code class="language-plaintext highlighter-rouge">True</code>이므로 조건문이 실행</p>

    <p>max_val = 35
min_val = 35</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">2번</code>으로 돌아간다. 사용한 연산자의 횟수를 되돌려두고 반복문을 계속한다. opers = [0, 0, 1, 0]
2번에서 사용한 “*” 연산 이후로는 더이상 남은 연산자가 없으므로 그냥 종료</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">1번</code>으로 돌아간다. 사용한 연산자의 횟수를 돌려두고 반복문을 계속한다. opers = [1, 0, 1, 0]</p>

    <p>”+”연산 이후에 반복문을 돌면서 사용하지 않은 “*“연산을 수행하고 수행한 횟수를 업데이트 해준다.
opers = [1,0,0,0]
temp = 3 * 4 = 12</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">dfs(2, [1, 0, 0, 0], 12)</code></p>

    <p>남은 연산자를 찾음 “+” 연산을 수행하고 사용한 횟수를 업데이트
opsers = [0,0,0,0]
temp = 12 + 5 = 17</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">dfs(3, [0, 0, 0, 0], 17)</code></p>

    <p><code class="language-plaintext highlighter-rouge">not any([0,0,0,0])</code>는  <code class="language-plaintext highlighter-rouge">True</code>이므로 조건문이 실행</p>

    <p>max_val = 35
min_val = 17</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">1번</code>으로 돌아간다. 더이상 확인해야할 연산이 없으므로 종료</p>
  </li>
  <li>
    <p>max_val과 min_val을 출력 (35, 17)</p>
  </li>
</ol>

:ET