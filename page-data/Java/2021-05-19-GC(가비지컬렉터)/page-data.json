{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/2021-05-19-GC(가비지컬렉터)/","result":{"data":{"site":{"siteMetadata":{"title":"프론트엔드 김도연","author":"Kim Doyeon","siteUrl":"https://kimdoyeonn.github.io","comment":{"disqusShortName":"","utterances":"kimdoyeonn/kimdoyeonn.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"40fcc449-911f-5043-a58f-c7d1f4cc6821","excerpt":"가비지 컬렉션 (garbage collection) 시스템에서 더 이상 사용하지 않는 동적 할당된 메모리 블럭이나 객체를 찾아 자동으로 다시 사용 가능한 자원으로 회수하는 것으로 시스템에서 가비지 컬렉션을 수행하는 부분을 가비지 컬렉터라고 한다. 가비지 컬렉터 실행 시점 JVM이 메모리가 부족해지면 OS에 추가로 메모리 요청을 할 때 가비지 컬렉션이 실행된다. 가비지 컬렉터 종류 Serial GC : MinorGC, Major GC를 순차적으로 진행 Parallel GC : 여러 CPU…","html":"<h1 id=\"가비지-컬렉션-garbage-collection\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BB%AC%EB%A0%89%EC%85%98-garbage-collection\" aria-label=\"가비지 컬렉션 garbage collection permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가비지 컬렉션 (garbage collection)</h1>\n<p>시스템에서 더 이상 사용하지 않는 동적 할당된 메모리 블럭이나 객체를 찾아 자동으로 다시 사용 가능한 자원으로 회수하는 것으로 시스템에서 가비지 컬렉션을 수행하는 부분을 <strong>가비지 컬렉터</strong>라고 한다.</p>\n<ul>\n<li>\n<p>가비지 컬렉터 실행 시점</p>\n<p>JVM이 메모리가 부족해지면 OS에 추가로 메모리 요청을 할 때 가비지 컬렉션이 실행된다.</p>\n</li>\n<li>\n<p>가비지 컬렉터 종류</p>\n<ul>\n<li>Serial GC : MinorGC, Major GC를 순차적으로 진행</li>\n<li>Parallel GC : 여러 CPU를 효과적으로 활용하기 위해 GC 수행시 멀티쓰레드를 사용</li>\n<li>CMS Collector : 가비지 컬렉션 작업을 어플리케이션 쓰레드와 동시 수행하여 Stop the World 시간을 최소화</li>\n<li>G1 Garbage Collector : 여러 CPU와 아주 큰 Memory에서 효과적인 GC를 수행하기 위해 사용</li>\n</ul>\n</li>\n<li>일반적으로 CMS Collector는 Parallel Collector보다 속도가 빠르다.</li>\n<li>Parallel Collector는 Full GC마다 메모리 단편화 제거 작업을 수행하지만 CMS는 Concurrent mode failure 경고가 발생할 때만 메모리 단편화 제거 작업을 수행한다.</li>\n<li>Stop the World : MinorGC 발생시 발생하며 모든 어플리케이션의 쓰레드가 중지하고 예외는 없다.</li>\n<li>Minor GC : Young Generation 영역을 정리하는 것. 새로 생성된 객체는 Eden 영역에 위치한다. Eden 영역에서 GC가 한번 발생한 후 살아남은 객체는 Survivor 영역 중 하나로 이동한다. 이 과정을 반복해서 살아남은 객체는 일정시간 참조되고 있다느 뜻이므로 Old 영역으로 이동한다.</li>\n<li>MajorGC(Full GC) : Old Generation 영역을 정리하는 것. Old 영역에 있는 모든 객체들을 검사하여 참조되지 않는 객체들을 한꺼번에 삭제한다.</li>\n</ul>","frontmatter":{"title":"가비지 컬렉터(Garbage Collector)란?","date":"May 19, 2021"}}},"pageContext":{"slug":"/Java/2021-05-19-GC(가비지컬렉터)/","previous":{"fields":{"slug":"/Java/[Spring] 스프링 시큐리티/"},"frontmatter":{"title":"[Spring] 스프링 시큐리티"}},"next":{"fields":{"slug":"/Java/2021-05-23-Object_oriented_programming/"},"frontmatter":{"title":"[Java] 객체지향프로그래밍이란?"}}}},"staticQueryHashes":["2486386679","3128451518"]}