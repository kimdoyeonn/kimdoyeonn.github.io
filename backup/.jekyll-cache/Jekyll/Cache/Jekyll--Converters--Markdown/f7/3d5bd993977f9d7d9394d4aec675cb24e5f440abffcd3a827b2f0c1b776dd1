I"/ <ul>
  <li>로컬컴퓨터: 개발 및 테스트 수행</li>
  <li>GitHub: 개발이 완료되면 프로그램 복사본 저장</li>
  <li><a href="https://www.pythonanywhere.com/">PythonAnywhere</a>: 웹사이트 배포</li>
</ul>

<h3 id="git-저장소-만들기">Git 저장소 만들기</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
git config --global user.name "Your Name"
git config --global user.email you@example.com
</code></pre></div></div>

<p>아래의 내용을 저장하고 이름을 <code class="language-plaintext highlighter-rouge">.gitignore</code>로 생성, 폴더 맨 위에 저장</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*.pyc
*~
__pycache__
myvenv
db.sqlite3
/static
.DS_Store
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">db.splite3</code>은 모든 게시물이 저장된 로컬 데이터베이스
PythonAnywhere는 다른 데이터베이스를 사용하기 때문에 저장소에 추가될 필요 없다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status // 미추척, 수정된, 스테이지된 파일, 프렌치 상태와 그 외 많은 정보를 보여준다
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit -m 'My Django Girls app, first commit'
git remote add origin http://repoURL
git push -u origin master
</code></pre></div></div>

<h4 id="github에서-pythonanywhere로-코드-가져오기">GitHub에서 PythonAnywhere로 코드 가져오기</h4>

<p>PythonAnywhere Bash에서</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone http://repoURL
tree my-first-blog //파일 확인
</code></pre></div></div>

<h4 id="pythonanywhere에서-가상환경virtualenv-생성하기">PythonAnywhere에서 가상환경(virtualenv) 생성하기</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd my-first-blog
virtualenv --python=python3.6 myvenv
source myvenv/bin/activate

(myvenv) $ pip install django~=2.0

</code></pre></div></div>

<h4 id="pythonanywhere에서-데이터베이스-생성하기">PythonAnywhere에서 데이터베이스 생성하기</h4>

<p>로컬 컴퓨터와는 다른 별도의 데이터베이스를 사용할 수 있다.
앞에서 했던 것처럼 <code class="language-plaintext highlighter-rouge">migrate</code>와 <code class="language-plaintext highlighter-rouge">createsuperuser</code>를 사용한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(myvenv) $ python manage.py migrate
(myvenv) $ python manage.py createsuperuser
</code></pre></div></div>

<h4 id="web-app으로-블로그-배포하기">web app으로 블로그 배포하기</h4>

<p>PythonAnywhere 대시보드에서 <strong>Web__클릭 -&gt; __Add a new web app</strong> 선택
도메인 설정(무료버전은 도메인 맘대로 안됨) -&gt; manual configuration(수동설정) -&gt; Python3.6</p>

<p>Django가 아니라 manual configuration으로 선택해야함</p>

<h4 id="가상환경virtualenv-설정하기">가상환경(virtualenv) 설정하기</h4>

<p><code class="language-plaintext highlighter-rouge">virtualenv</code> 섹션에서 <code class="language-plaintext highlighter-rouge">Enter the path to a virtualenv</code>를 클릭하고 <code class="language-plaintext highlighter-rouge">/home/username/my-first-blog/myvenv/</code>입력</p>

<p>입력하면 맞았는지 틀렸는지 확인할 수 있음</p>

<h4 id="wsgi-파일-설정하기">WSGI 파일 설정하기</h4>

<p>장고는 <code class="language-plaintext highlighter-rouge">WSGI 프로토콜</code>을 사용해 작동한다. 이 프로토콜은 파이썬을 이용한 웹사이트를 서비스하기 위한 표준으로 PythonAnywhere에서도 지원합니다. WSGI 설정파일을 수정해 내가 만든 장고 블로그를 PythonAnywhere가 인식하게 만들 수 있다. __Web__탭 내의 __code__섹션을 찾아서 <code class="language-plaintext highlighter-rouge">/var/www/yeon_pythonanywhere_com_wsgi.py</code>의 모든 내용을 지우고 아래의 코드를 입력</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">path</span> <span class="o">=</span> <span class="s">'/home/name/my-first-blog'</span>
<span class="k">if</span> <span class="n">path</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">:</span>
    <span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>

<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'DJANGO_SETTINGS_MODULE'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'mysite.settings'</span>

<span class="kn">from</span> <span class="nn">django.core.wsgi</span> <span class="kn">import</span> <span class="n">get_wsgi_application</span>
<span class="kn">from</span> <span class="nn">django.contrib.staticfiles.handlers</span> <span class="kn">import</span> <span class="n">StaticFilesHandler</span>
<span class="n">application</span> <span class="o">=</span> <span class="n">StaticFilesHandler</span><span class="p">(</span><span class="n">get_wsgi_application</span><span class="p">())</span>
</code></pre></div></div>

<ul>
  <li>PythonAnywhere에게 웹 애틀리케이션의 위치와 Django설정 파일명을 알려주는 역할</li>
  <li><code class="language-plaintext highlighter-rouge">StaticFileHandler</code>는 CSS를 위한 것, <code class="language-plaintext highlighter-rouge">runserver</code>명령을 로컬 개발 중에 자동을 처리된다.</li>
</ul>

<h4 id="디버깅-팁">디버깅 팁</h4>

<p>본인의 사이트에 접속할 때 오류가 보이면 제일 먼저 <strong>error log</strong>(Web tab)에서 디버깅 정보를 찾는다. 여기서 오류메세지를 확인한다. (최근의 오류 메세지는 맨 하단)</p>

<ul>
  <li>virtualenv를 생성하고 활성화할 때, Django를 설치할 때, Collestac을 돌릴 때, 데이터베이스를 설치할 때 같은 각 단계를 위한 콘솔 작업을 할 때 한 단계를 빼먹는 경우</li>
  <li>web tab에서 virtualenv 경로를 쓸 때 오타 -&gt; 이런 경우 작은 빨간 에러메세지가 뜰 것</li>
  <li>WSGI 설정 파일에서 실수가 있었을 때 ex) 경로</li>
  <li>Web app에서 그랬듯, virtualenv에서도 같은 파이썬 버전이 선택됐는지. 모두 버전이 <code class="language-plaintext highlighter-rouge">3.4</code> -&gt;?3.6만 눌렀던거같은데</li>
  <li>만약 <code class="language-plaintext highlighter-rouge">Invalid HTTP_HOST header: &lt;your-site-name&gt; . You may need to add &lt;your-site-name&gt; to ALLOWED_HOSTS.</code> 라는 오류메세지가 나온다면 <code class="language-plaintext highlighter-rouge">/mysite/settings.py</code>의 마지막 줄에 <code class="language-plaintext highlighter-rouge">ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]', '.pythonanywhere.com']</code> 를 추가 한 뒤에 다시 <strong>Web</strong> 탭에서 <code class="language-plaintext highlighter-rouge">Reload &lt;your-site-name</code>이라는 녹색 버튼을 눌러 주세요.</li>
</ul>

<h3 id="배포-끝">배포 끝!</h3>

<p>로컬 컴퓨터에서와 똑같은 페이지를 보여줍니다. URL끝에 <code class="language-plaintext highlighter-rouge">/admin/</code>을 추가하면 관리자 사이트로 이동합니다. 데이터베이스를 생성하면서 만든 superuser 계정으로 로그인하면 서버에 새 게시물을 추가할 수 있습니다.</p>

:ET