I"|*<h3 id="클래스">클래스</h3>

<ul>
  <li>
    <p>클래스(class) -&gt; 과자틀</p>
  </li>
  <li>
    <p>객체(object) -&gt; 과자 틀에 의해서 만들어진 과자</p>
  </li>
  <li>
    <p>객체와 인스턴스의 차이</p>

    <ul>
      <li>
        <p>클래스로 만든 객체를 인스턴스라고도 한다.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">a = Cookie()</code></p>

        <ul>
          <li>
            <p>a는 객체</p>
          </li>
          <li>
            <p>a는 Cookie의 인스턴스</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>사칙연산 계산기 예제</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">FourCal</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">setdata</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">first</span> <span class="o">=</span> <span class="n">first</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">second</span> <span class="o">=</span> <span class="n">second</span>
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">second</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="k">def</span> <span class="nf">mul</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">first</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">second</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">first</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">second</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="k">def</span> <span class="nf">div</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">first</span> <span class="o">/</span> <span class="bp">self</span><span class="p">.</span><span class="n">second</span>
        <span class="k">return</span> <span class="n">result</span>



<span class="n">a</span> <span class="o">=</span> <span class="n">FourCal</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">FourCal</span><span class="p">()</span>

<span class="c1"># FourCal.setdata(a,4,2) # 잘사용하진 않지만 이 방법도 가능
</span><span class="n">a</span><span class="p">.</span><span class="n">setdata</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="n">b</span><span class="p">.</span><span class="n">setdata</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>

<span class="c1"># 주소값이 다른걸 확인할 수 있다.
</span><span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">first</span><span class="p">))</span> <span class="c1">#11567616
</span><span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">))</span> <span class="c1">#11567584
</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">add</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">mul</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">sub</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">div</span><span class="p">())</span>

</code></pre></div></div>

<h3 id="생성자constructor">생성자(Constructor)</h3>

<pre><code class="language-pytho">class FourCal:
	def ___init___(self,first,second):
		self.first = first
		self.second = second
    def setdata(self, first, second):
        self.first = first
        self.second = second
    def add(self):
        result = self.first + self.second
        return result
    def mul(self):
        result = self.first * self.second
        return result
    def sub(self):
        result = self.first - self.second
        return result
    def div(self):
        result = self.first / self.second
        return result



a = FourCal()
b = FourCal()

# FourCal.setdata(a,4,2) # 잘사용하진 않지만 이 방법도 가능
a.setdata(4,2)
b.setdata(3,6)

# 주소값이 다른걸 확인할 수 있다.
print(id(a.first)) #11567616
print(id(b.first)) #11567584

print(a.add())
print(a.mul())
print(a.sub())
print(a.div())

</code></pre>

<h3 id="클래스의-상속inheritance">클래스의 상속(inheritance)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 상속
</span><span class="k">class</span> <span class="nc">MoreFourCal</span><span class="p">(</span><span class="n">FourCal</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">pow</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">first</span> <span class="o">**</span> <span class="bp">self</span><span class="p">.</span><span class="n">second</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<p>MoreFourCal 클래스는 FourCal 클래스를 상속했으므로 FourCal 클래스의 모든 기능을 사용할 수 있다.</p>

<ul>
  <li>상속을 사용하는 이유
    <ul>
      <li>기존 클래스를 변경하지 않고 기능을 추가하거나 기존 지능을 변경하려고 할 때 사용한다.</li>
      <li>기존 클래스가 라이브러리 형태로 제공되거나 수정이 허용되지 않는 상황이라면 상속을 사용하여야 한다.</li>
    </ul>
  </li>
</ul>

<h3 id="메서드-오버라이딩overriding">메서드 오버라이딩(Overriding)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MoreFourCal</span><span class="p">(</span><span class="n">FourCal</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">div</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">second</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="c1"># 나누는 값이 0인 경우 0을 리턴하도록 수정
</span>            <span class="k">return</span> <span class="mi">0</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">first</span> <span class="o">/</span> <span class="bp">self</span><span class="p">.</span><span class="n">second</span>
</code></pre></div></div>

<ul>
  <li>부모클래스(상속한 클래스)에 있는 메서드를 동일한 이름으로 다시 만드는 것을 메서드 오버라이딩(덮어쓰기)이라고 한다.</li>
  <li>메서드를 오버라이딩하면 부모 클래스의 메서드 대신 오버라이딩한 메서드가 호출된다.</li>
</ul>

<h3 id="클래스-변수">클래스 변수</h3>

<ul>
  <li>객체 변수는 다른 객체들에 영향받지 않고 독립적으로 그 값을 유지한다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 클래스변수
</span><span class="k">class</span> <span class="nc">Family</span><span class="p">:</span>
    <span class="n">lastname</span> <span class="o">=</span> <span class="s">"김"</span>

<span class="k">print</span><span class="p">(</span><span class="n">Family</span><span class="p">.</span><span class="n">lastname</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">Family</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">Family</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">lastname</span><span class="p">)</span> <span class="c1"># 김
</span><span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">lastname</span><span class="p">)</span> <span class="c1"># 김
</span>
<span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">Family</span><span class="p">.</span><span class="n">lastname</span><span class="p">))</span> <span class="c1"># 140434541531008
</span><span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">lastname</span><span class="p">))</span> <span class="c1"># 140434541531008
</span><span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">lastname</span><span class="p">))</span> <span class="c1"># 140434541531008
</span></code></pre></div></div>

:ET