{"componentChunkName":"component---src-templates-blog-post-js","path":"/DeepDive/deep-dive-18/","result":{"data":{"site":{"siteMetadata":{"title":"프론트엔드 김도연","author":"Kim Doyeon","siteUrl":"https://kimdoyeonn.github.io","comment":{"disqusShortName":"","utterances":"kimdoyeonn/kimdoyeonn.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"6cce2f60-1b8e-5c96-ac37-28f9ee2173a6","excerpt":"모던 자바스크립트 Deep Dive…","html":"<ul>\n<li>모던 자바스크립트 Deep Dive</li>\n</ul>\n<h3 id=\"일급객체란\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EA%B8%89%EA%B0%9D%EC%B2%B4%EB%9E%80\" aria-label=\"일급객체란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일급객체란?</h3>\n<ul>\n<li>무명 리터럴로 생성할 수 있다. (런타임에 생성 가능)</li>\n<li>변수나 자료구조(객체, 배열 등)에 저장할 수 있다.</li>\n<li>함수의 매개변수에 전달할 수 있다.</li>\n<li>함수의 반환값으로 사용할 수 있다.</li>\n</ul>\n<p>자바스크립트의 함수는 위의 조건을 모두 만족하는 일급객체이다.</p>\n<p>함수가 일급객체라는 의미는 함수를 객체, 값과 동일하게 취급하며 사용할 수 있다는 의미이다. 따라서 함수는 값을 사용할 수 있는 모든 곳에서 리터럴로 정의할 수 있으며 런타임에 함수로 평가된다.</p>\n<ul>\n<li>함수는 객체이지만 함수 고유의 프로퍼티를 가지고 있어 호출할 수 있다는 점에서 일반 객체와는 차이가 있다.</li>\n</ul>\n<h3 id=\"함수-객체의-프로퍼티\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"함수 객체의 프로퍼티 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 객체의 프로퍼티</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">arguments</code></p>\n<ul>\n<li><code class=\"language-text\">arguments</code> 객체를 값으로 가지는 프로퍼티이다.</li>\n<li><code class=\"language-text\">arguments</code> 객체는 함수 호출 시 전달된 인수들의 정보를 담고 있는 순회가능한 유사 배열 객체이다.</li>\n<li>\n<p>유사 배열 객체(array-like-object)</p>\n<p>length 프로퍼티를 가진 객체로 for문으로 순회할 수 있는 객체를 말한다. 배열이 아니기 때문에 배열 메서드를 사용할 경우 에러가 발생한다.</p>\n<p>ES6에서 이터러블이 도입되면서 ES6이후로는 이터러블이면서 유사 배열 객체이다.</p>\n</li>\n<li>함수 내부에서 지역 변수처럼 사용된다.(함수 외부에서 참조할 수 없다.)</li>\n<li>일부 브라우저에서 지원하고 있지만 ES3부터 표준에서 폐지되었으므로 <code class=\"language-text\">Function.arguments</code> 같은 사용법은 권장되지 않는다. 대신 함수 내부에서 지역 변수처럼 사용할 수 있는 arguments 객체를 사용한다.</li>\n</ul>\n<p>자바스크립트는 함수의 매개변수와 인수의 개수가 일치하는지 확인하지 않는다. 따라서 함수 호출 시 매개변수 개수만큼 인수를 전달하지 않아도 에러가 발생하지 않는다.</p>\n<p>함수를 정의할 때 선언한 매개변수는 함수 내부에서 변수와 동일하게 취급된다. 즉, 함수가 호출되면 함수 내부에서 암묵적으로 변수가 선언되고 undefined로 초기화된 후 인수가 할당된다.</p>\n<p>때문에 인수가 전달되지 않은 매개변수는 undefined로 초기화된 상태를 유지하게 된다. 인수를 매개변수의 개수보다 많이 전달한 경우 초과된 인수는 무시된다.</p>\n<p>그렇다고 초과된 인수가 버려지는 것은 아니다. 모든 인수는 암묵적으로 <code class=\"language-text\">arguments</code> 객체의 프로퍼티로 보관된다.</p>\n<ul>\n<li>함수를 호출할 때 전달된 인수의 개수를 확인하지 않는 자바스크립트의 특성때문에 함수가 호출되면 인수 개수를 확인하고 이에 따라 함수의 동작을 달리 정의할 필요가 있을 수 있다.(가변인수함수) 이 때 <code class=\"language-text\">arguments</code> 객체를 유용하게 사용할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">caller</code></p>\n<ul>\n<li>함수 자신을 호출한 함수를 가리킨다.</li>\n<li>ECMAScript 사양에 포함되지 않는 비표준 프로퍼티</li>\n<li>이후에 표준화될 예정도 없는 프로퍼티이다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">length</code></p>\n<ul>\n<li>함수를 정의할 때 선언한 매개변수의 개수를 가리킨다.</li>\n<li>arguments 객체의 length 프로퍼티는 인자의 개수를 가리키고, 함수 객체의 length 프로퍼티는 매겨변수의 개수를 가리키므로 둘의 값은 다를 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">name</code></p>\n<ul>\n<li>함수의 이름을 나타낸다.</li>\n<li>ES6 이전엔 비표준이었다가 이후에 표준이 되었다.</li>\n<li>ES5와 ES6에서 동작을 달리하므로 주의해야 한다.</li>\n<li>ES5: 익명 함수 표현식에서 빈 문자열을 값으로 가짐</li>\n<li>ES6: 익명 함수 표현식에서 함수 객체를 가리키는 식별자를 값으로 가짐</li>\n<li>함수 이름과 함수 객체를 가리키는 식별자는 의미가 다르다. 함수를 호출할 때는 함수 이름이 아닌 함수 객체를 가리키는 식별자로 호출한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//   식별자           이름</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">__proto__</code></p>\n<ul>\n<li><code class=\"language-text\">[[Prototype]]</code> 내부 슬롯이 가리키는 프로토타입 객체에 접근하기 위해 사용하는 접근자 프로퍼티</li>\n<li>내부 슬롯에는 직접 접근할 수 없고 간접적인 접근 방법을 제공하는 경우에 한해 접근할 수 있다.</li>\n<li><code class=\"language-text\">[[Prototype]]</code>에도 직접 접근이 불가능하기 때문에 <code class=\"language-text\">__proto__</code> 접근자 프로퍼티를 통해 간접적으로 프로토타입 객체에 접근할 수 있다.</li>\n<li>함수 객체 고유의 프로퍼티가 아니라 Object.prototype 객체의 프로퍼티를 상속 받은 것이다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">prototype</code></p>\n<ul>\n<li>생성자 함수로 호출할 수 있는 함수 객체, 즉 constructor만이 소유하는 프로퍼티이다.</li>\n<li>일반 객체와 생성자 함수를 호출할 수 없는 non-constructor는 prototype 프로퍼티가 없다.</li>\n<li>함수가 객체를 생성하는 생성자 함수로 호출될 때 생성자 함수가 생성할 인스턴스의 프로토타입 객체를 가리킨다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"18장 함수와 일급객체","date":"February 09, 2022"}}},"pageContext":{"slug":"/DeepDive/deep-dive-18/","previous":{"fields":{"slug":"/Java/2021-05-28-mvc-pattern/"},"frontmatter":{"title":"[Java] MVC 패턴이란?"}},"next":{"fields":{"slug":"/DeepDive/deep-dive-17/"},"frontmatter":{"title":" 17장 생성자 함수에 의한 객체 생성"}}}},"staticQueryHashes":["2486386679","3128451518"]}